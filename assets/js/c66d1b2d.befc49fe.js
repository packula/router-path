"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[850],{2186:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return h},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return o},default:function(){return d}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),p=(a(8215),a(5064),["components"]),h={id:"PathPattern",title:"PathPattern",sidebar_label:"PathPattern",hide_title:!0},l="PathPattern",s={unversionedId:"api/type/PathPattern",id:"api/type/PathPattern",isDocsHomePage:!1,title:"PathPattern",description:"The PathPattern interface is implemented by the [path pattern] objects that",source:"@site/../docs/api/type/PathPattern.mdx",sourceDirName:"api/type",slug:"/api/type/PathPattern",permalink:"/router-path/api/type/PathPattern",editUrl:"https://github.com/snout-router/router-path/edit/main/website/../docs/api/type/PathPattern.mdx",tags:[],version:"current",frontMatter:{id:"PathPattern",title:"PathPattern",sidebar_label:"PathPattern",hide_title:!0},sidebar:"docs",previous:{title:"ParamOrString",permalink:"/router-path/api/type/ParamOrString"}},o=[{value:"Methods",id:"methods",children:[{value:"<code>build</code>",id:"method-build",children:[{value:"Parameters",id:"method-build-parameters",children:[],level:4},{value:"Return value",id:"method-build-return-value",children:[],level:4}],level:3},{value:"<code>match</code>",id:"method-match",children:[{value:"Parameters",id:"method-match-parameters",children:[],level:4},{value:"Return value",id:"method-match-return-value",children:[],level:4}],level:3},{value:"<code>test</code>",id:"method-test",children:[{value:"Parameters",id:"method-test-parameters",children:[],level:4},{value:"Return value",id:"method-test-return-value",children:[],level:4}],level:3}],level:2},{value:"Type variables",id:"type-variables",children:[{value:"<code>Params</code>",id:"type-variable-params",children:[],level:3}],level:2}],m={toc:o};function d(e){var t=e.components,a=(0,r.Z)(e,p);return(0,i.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"pathpattern"},(0,i.kt)("inlineCode",{parentName:"h1"},"PathPattern")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"PathPattern")," interface is implemented by the ",(0,i.kt)("a",{parentName:"p",href:"/router-path/guides/path-patterns"},"path pattern")," objects that\nare created when using the ",(0,i.kt)("a",{parentName:"p",href:"/router-path/api/path"},(0,i.kt)("inlineCode",{parentName:"a"},"path"))," function."),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"method-build"},(0,i.kt)("inlineCode",{parentName:"h3"},"build")),(0,i.kt)("p",null,"Build a path."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"no-transpile","no-transpile":!0},"function build (args: { [paramName: string]: any }): string\n")),(0,i.kt)("h4",{id:"method-build-parameters"},"Parameters"),(0,i.kt)("p",null,"Accepts a single argument - an object containing the arguments for each route\nparameter."),(0,i.kt)("p",null,"The keys of the ",(0,i.kt)("inlineCode",{parentName:"p"},"args")," object must match the names of the ",(0,i.kt)("a",{parentName:"p",href:"/router-path/guides/path-patterns"},"path pattern"),"'s route\nparameters. The values must also be of the correct type for each parameter. When\na parameter accepts ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," arguments, omitting the argument is also\nallowed."),(0,i.kt)("h4",{id:"method-build-return-value"},"Return value"),(0,i.kt)("p",null,"A path string matching the ",(0,i.kt)("a",{parentName:"p",href:"/router-path/guides/path-patterns"},"path pattern"),", with each of the parameters filled\nwith a formatted version of the supplied argument."),(0,i.kt)("h3",{id:"method-match"},(0,i.kt)("inlineCode",{parentName:"h3"},"match")),(0,i.kt)("p",null,"Check if a path matches the pattern, and return arguments if the match is\nsuccessful."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"no-transpile","no-transpile":!0},"function match (path: string): { [paramName: string]: any } | undefined\n")),(0,i.kt)("h4",{id:"method-match-parameters"},"Parameters"),(0,i.kt)("p",null,"Accepts a single argument - the path string to match against."),(0,i.kt)("h4",{id:"method-match-return-value"},"Return value"),(0,i.kt)("p",null,"If the supplied path string matches the pattern, ",(0,i.kt)("inlineCode",{parentName:"p"},"match")," will return an object\nwith keys matching the names of the ",(0,i.kt)("a",{parentName:"p",href:"/router-path/guides/path-patterns"},"path pattern"),"'s route parameters. The\nstring arguments will be parsed into values of the appropriate type for each\nparameter."),(0,i.kt)("p",null,"If the path does not match the pattern, ",(0,i.kt)("inlineCode",{parentName:"p"},"match")," will return ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,i.kt)("h3",{id:"method-test"},(0,i.kt)("inlineCode",{parentName:"h3"},"test")),(0,i.kt)("p",null,"Check if a path matches the pattern."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"no-transpile","no-transpile":!0},"function test (path: string): boolean\n")),(0,i.kt)("h4",{id:"method-test-parameters"},"Parameters"),(0,i.kt)("p",null,"Accepts a single argument - the path string to match against."),(0,i.kt)("h4",{id:"method-test-return-value"},"Return value"),(0,i.kt)("p",null,"A boolean value indicating whether the path matched the pattern or not."),(0,i.kt)("h2",{id:"type-variables"},"Type variables"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"PathPattern")," type is a ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/2/generics.html"},"generic")," type:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"PathPattern<Params extends Array<Param<string, any>>>\n")),(0,i.kt)("h3",{id:"type-variable-params"},(0,i.kt)("inlineCode",{parentName:"h3"},"Params")),(0,i.kt)("p",null,"The type of parameters contained in the ",(0,i.kt)("a",{parentName:"p",href:"/router-path/guides/path-patterns"},"path pattern"),"."),(0,i.kt)("p",null,"Typically, you would not need to manually specify this type variable, as the\nparameter types are automatically inferred when calling the ",(0,i.kt)("a",{parentName:"p",href:"/router-path/api/path"},(0,i.kt)("inlineCode",{parentName:"a"},"path"))," function to\ncreate path patterns:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"no-transpile","no-transpile":!0},"import {path} from '@snout/router-path'\n\nconst user = path`/user/${'id'}` // user has a type of PathPattern<[Param<'id', string>]>\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Try me!")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAbzAQxgCwL5wGZQiOAcgAEBnAOwgFcYB6PGgUygFoV1CAoTgYwnNLwqpZnAC8cdmgAGtYc1oASBIWAATQhmlxatOPKhw0yUnGRwYATzCM4EbHAAKqNM5gxm5ADwBtZ1GQQL1UNABo4QShgcgBzAD4AXTigA"},"Try this example in the TypeScript Playground")))))}d.isMDXComponent=!0}}]);